# HTML is the foundation and structure.
# CSS is the paint and the decorations for the appearances

    3 different ways to apply CSS into our document
        External
        Internal
        Inline
        
    CSS selectors
        Element selector = select all of the element of that.
                         = can be used only for that element.
            -> This will implement inheritance throughtout the page.
                Example: body element (only one body element per page)
                        or p {}  when declared, it will changed all of the <p> tag in the html.
            
        Class selector = Can be used more than once.
                       = More specific
            -> It starts with a period .
                Example:
                    .gray {

                    }
            -> To use the class selector to the html, you need to invoke it on the class (<p id="" class="color">)
            
        ID selector = Can be used only once and unique.
                    = It is not a good practice to use ID selector inside css
            -> It starts with a pound sign #
                Example:
                    #second {
                        font-style: italic;
                    }
            -> To use the ID selector to the html, you need to invoke it on the id <p id="idSelectorName" class="">


    Inheritance = That is where another elements inherit another element's peroperty or settings, the latest code will bypass the older code.
            -> Do not repeat yourself (DRY)


    Colors = Just use the hex # fer easy UI gradients

    Units and sizes = Pixel "px" was the commonly used.
            -> 16px was the default text of browser.
            -> rem was the typical unit used for font size.
            -> When using %, you need to remember that it is relative to the parent.
                Example: 
                    <header> with width 50%
                        <h1> with 50% -> this will only 25% of the screen.
                
    CSS Box Model = to manipulate the layout of each of the content.
                margin
                    border
                        padding
                            content         

    Typography = This is the font manipulation.
               = This is the way that the text is arranged and presented.

            -> text-align: (left/right/center/justify) = positioning
            -> text-decorations: (line-through/underline/overline/none) = with line
            -> text-transform: (capitalize/lowercase/uppercase) - letter manipulation
            -> text-indent: (2em) = indention of the first line.
            -> line-height: (1.5) = line space
            -> letter-spacing: () = letter space
            -> word-spacing: () = word space
            -> font-size: () = size of font
            -> font-weight: (bold?) = bold setting
            ->font-style: (italic/oblique) = italic settings
            -> font-family: () = 

    CSS links = basically you need to just set the following:
            -> text decorations, default color and pointer
            -> a:visited {}
            -> a:hover, a:focus {}
            -> a:active {}

    Ordered lists = 
            -> list-style-type: (lower-alpha/decimal/upper-roman) = setting the list appearances.
            -> list-style: square url('../img/checkmark.png') inside; = adding custom png
                ul li:nth-child(odd/2/even) { /* change the second list item */
                    color: red;
                }

    Display = How display was rendered using block and inline elements.
            
            -> Block level = stacks of boxes with 100percent width of their given containers.
                           = it stacks on top of each other.
                           = create a new line elements.
                Example:
                    <h1>, <p>, <li>
            -> Inline level = only occupies what their content needs
                            = do not stack on top of each other and does not create a new line. 
                            = Useful on links and buttons
                Example:
                    <a> <img>

    Floats = 
            -> to fix the overlapping of the section
                blockElementName {
                    display: flow-root;
            -> If you want an element to start a new line use the float and clear.
                    elementName {
                        clear:both;
                        float:left;
                    }
    Column = 
            -> Always use class (.) to manipulate the css.
            -> Always set desired width.
            -> Use break-inside: avoid; for properties with background colors


    Position = Alignment of elements using .className{position: ;}.
            -> Absolute needs relative parent.

    Flexbox = CSS Flexbox is a layout model in CSS that provides a simple way to align and distribute space among elements within a container, even when their size is unknown or dynamic. It offers more control over the layout of elements than the traditional block and inline layout models, making it easier to create complex, responsive designs.
            = CSS Flexbox is best suited for one-dimensional layouts, where elements are arranged either in a row (horizontally) or a column (vertically), and can be stretched to fill the available space. It is ideal for aligning items along one axis and distributing remaining space.
            = Flexbox consists of flex containers and flex items, with properties such as justify-content, align-items, and flex-direction to control the flow and alignment of elements within the container.
            -> This is the basic code to center a div (container)    
                    display: flex;
                    justify-content: center;
                    align-items: center;

            or
                justify-content: =  Aligns flex items along the main axis.
                    flex-start: Items align to the left side of the container.
                    flex-end: Items align to the right side of the container.
                    center: Items align at the center of the container.
                    space-between: Items display with equal spacing between them.
                    space-around: Items display with equal spacing around them.
                    space-evenly: Align items along the main axis of a flex container.

                align-items: Aligns flex items along the cross axis.
                    flex-start: Items align to the top of the container.
                    flex-end: Items align to the bottom of the container.
                    center: Items align at the vertical center of the container.
                    baseline: Items display at the baseline of the container.
                    stretch: Items are stretched to fit the container.

                flex-direction: Defines the direction of the main axis. (Order of the direction)
                    row: Items are placed the same as the text direction.
                    row-reverse: Items are placed opposite to the text direction.
                    column: Items are placed top to bottom.
                    column-reverse: Items are placed bottom to top.

                order: Specifies the order of the flex item.

                align-self: Aligns a flex item along the cross axis, overriding the align-items value.
                    flex-start
                    flex-end
                    center
                    baseline stretch

                flex-wrap: Specifies whether flex items are forced on a single line or can be wrapped on multiple lines.
                    nowrap: Every item is fit to a single line.
                    wrap: Items wrap around to additional lines.
                    wrap-reverse: Items wrap around to additional lines in reverse.

                flex-flow: Shorthand property for flex-direction and flex-wrap.
                    Example: flex-flow: column wrap;

                align-content: Aligns a flex container's lines within the flex container when there is extra space on the cross-axis.
                    Note: Determines the spacing between lines, while align-items determines how the items as a whole are aligned within the container. When there is only one line, align-content has no effect.

                    flex-start: Lines are packed at the top of the container.
                    flex-end: Lines are packed at the bottom of the container.
                    center: Lines are packed at the vertical center of the container.
                    space-between: Lines display with equal spacing between them.
                    space-around: Lines display with equal spacing around them.
                    stretch: Lines are stretched to fit the container.

    Grid layout = With CSS Grid, you can define the size and position of grid items, control the spacing between rows and columns, and create complex, responsive designs that can adapt to different screen sizes.
            Example:
                display: grid;
                grid-template-columns: repeat(2, 1fr 2fr);

                or 
                grid-column-start: = specifies a grid item's start position within the grid columns
                grid-column-end: = specifies a grid item's end position within the grid columns
                grid-column: = shorthand for start and end of column. example grid-column: 4/6
                grid-row-start: = specifies a grid item's start position within the grid rows
                grid-row-end: = specifies a grid item's end position within the grid rows
                grid-row: = shorthand for start and end of row example. grid-row: 4/6
                grid-area: = specifies a grid item's position and size within the grid. (combination of grid column + grid row) format is grid-row-start, grid-column-start, grid-row-end, followed by grid-column-end. Example: grid-area: 1 / 4 / 6 / 5
                order: = Like a z-index to overwrite the order
                grid-template-columns: Specifies the sizing and names of the grids columns with property of <length> <percentage> <flex> max-content min-content and minmax
                grid-template-columns: 100px 3em 40%;
                grid-template: = Specifies the sizing and names of the grid's rows and columns
                    Example
                        grid-template: 1fr 50px / 1fr 4fr;


    Images: = 
        Reset -:> img {display: block;} // to remove the white space below.
        Round images -:> border-radius: 50%; // making it round.
        Adding images -:> background-image: url(../img/);
        Clip compatibility for browser -:>
                    -webkit-background-clip: text;
                    background-clip: text;

    Media Queries Syntax = Smallest screen first/mobile first design
        Syntax @media media type and (condition: breakpoint) {
            // CSS rules
        }

        min-width = width starting from 
        max-width = up to the width of
        orientation - "landscape"
        min-aspect-ratio: 

        You can check the display on dev tools using layout and dimension response (in the left display)


    Pseudo = 
        Pseudo class -> using single :
        Pseudo element -> using double ::

    Variable = 
    :PseudoPropertyName {
        --VARIABLE NAME: value;
    }

    Functions = functionName()
        min(2.25rem, 3vh) -> this will always going to select the smallest of two available.
            3vh is height reference

        min(absolute value, relative value)

        max actually provides a minimum absolute value
        min actually provides a maximum absolute value

## Note -
            - Starts with css reset.
                * {
                margin 0;
                padding 0;
                box-sizing: border-box;
                }

            - Order of external, internal and inline CSS
            - Avoid inline CSS, better use external CSS.
            - You can group selectors example h1, h2, h3 {color: blue;}
            - You can verify/check css element on chrome dev tools. chrome > rightclick > inspect > styles > elements
            - Better to use html {} for setting the parent element instead of body {}
            - Only px and rem for the unit size. rem for font size.
            - use em on margin and padding.
            - You shouldnt set a font size on the root element.
            - When on dev tools, if you hover, the orange is the margin and the green is the padding.
            - for font family - it is common to use roboto or sans serif, monospace and fantasy
            - when using font, it is better not to use external link such as google font for it takes more to load, if you need to use google font better use import inside the css.
            - the order of hyperlink settings
                a {}
                    a:visited {}
                        a:hover, a:focus {}
                            a:active {}
                -:> text opacity is the common application of sudo class           

            - using sudo with : and ::
                example: 
                        ul li:nith-child() {} = 
                        ::marker = This is the part that you can add svg and font awesome for markers.

            - This is for basic navigation:
                    @import url('https://fonts.googleapis.com/css2?family=Roboto&display=swap');

                    *{
                        margin: 0;
                        padding: 0;
                        box-sizing: border-box;
                    }
                    body {
                        font-size: 2rem;
                        font-family: "Roboto", sans-serif;
                    }
                    ul {
                        list-style-type: none;
                        padding: 0.5rem;
                        text-align: right;
                        background-color: black;
                        margin: 0;
                    }
                    li {
                        display: inline-block;
                        margin-inline: 0.5rem;
                    }
                    li a {
                        color: #fff;
                        text-decoration: none;
                    }
                    li a:hover,
                    li a:focus {
                        text-decoration: underline;
                    }

            Color each element
            Use semantics in creating a page layout/column instead of div.
                Use overflow for center column to resolve the height required issue

            z-index is used for reordering structured position.

            to check the grid in dev tools:
                    f12 > elements > layout > scroll down to grid overlays > main.containers.

## CSS Anatomy/Order of things

    >> Always starts at the Top.
        *{}
            body{}
                header{}
                    nav{}
                        h2{}
                            ul{}
                                li{}

                main{}
                    article{}
                footer{}
## Organizing
https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Organizing

    >>  This is how the css syntax.
        p {
            color: red;
        }

        Where p is the selector
        color is the property
        red is the property value
        color: red; is the declaration.


# Steps in CSS
    Preparing the column
        1. Color each element.
        2. Determine the overall width of the layout.
        3. Adjust the width of the page-wide elements.
        4. Float the column.
        5. Set the column widths.
        6. Clear the column width.
        7. Adjust borders and padding.
        8. Adjust widths again.
        9. Check the column documentation.

## Legend
        Main axis runs horizontally in a row, from left to right.
        Cross axis runs vertically in a column, from top to bottom.

## Resources:
    Readables/guide
        https://developer.mozilla.org/en-US/docs/Web/CSS
    Color palette
        https://coolors.co/
    CSS file validator
        w3c.ord/css-validator
    A visual way to understand CSS specificity
        https://specificity.keegan.st/
    External font
        https://fonts.google.com/
    Unicode character
        https://unicode-table.com/en/
    Emoji 
        https://emojipedia.org/rocket/
    Flexbox games
        https://flexboxfroggy.com
    Grid layout games
        https://codepip.com/games/grid-garden/
        hindtag
        Cssjourney


Continue on "8:37:00"
https://www.youtube.com/watch?v=OXGznpKZ_sA

